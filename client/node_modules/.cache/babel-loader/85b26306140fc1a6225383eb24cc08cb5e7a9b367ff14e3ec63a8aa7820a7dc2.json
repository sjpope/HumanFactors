{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sampo\\\\OneDrive\\\\Documents\\\\TXST\\\\Human Factors\\\\Repos\\\\HumanFactors\\\\client\\\\src\\\\pages\\\\Register.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Register() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password1, setPassword1] = useState('');\n  const [password2, setPassword2] = useState('');\n  const [error, setError] = useState('');\n\n  // TODO: Implement the register functionality\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (password1 !== password2) {\n      setError('Passwords do not match.');\n      return;\n    }\n    fetch('http://127.0.0.1:8000/api/register/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n        window.location.href = \"/\"; // Redirect to home on success\n      } else {\n        setError('Failed to Register');\n      }\n    }).catch(() => setError('Failed to Register'));\n  };\n\n  // form validation & improvements here\n\n  /*\r\n  Django Register Form:\r\n    class RegisterForm(UserCreationForm):\r\n  email = forms.EmailField(required=False)  \r\n    class Meta:\r\n      model = User\r\n      fields = [\"username\", \"email\", \"password1\", \"password2\"]\r\n    def clean_email(self):\r\n      email = self.cleaned_data['email'].lower()\r\n      r = User.objects.filter(email=email)\r\n      if r.exists():\r\n          raise ValidationError(\"Email already exists\")\r\n      return email\r\n    def save(self, commit=True):\r\n      user = super(RegisterForm, self).save(commit=False)\r\n      user.email = self.cleaned_data['email']\r\n      if commit: \r\n          user.save()\r\n      return user\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"register-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(Register, \"vUpMkZNfxYram2sUWvReAleR4oc=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Register","_s","username","setUsername","email","setEmail","password1","setPassword1","password2","setPassword2","error","setError","handleSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","password","then","response","json","data","token","localStorage","setItem","window","location","href","catch","className","children","onSubmit","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","setPassword","_c","$RefreshReg$"],"sources":["C:/Users/sampo/OneDrive/Documents/TXST/Human Factors/Repos/HumanFactors/client/src/pages/Register.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Register() {\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password1, setPassword1] = useState('');\r\n    const [password2, setPassword2] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    // TODO: Implement the register functionality\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (password1 !== password2) {\r\n            setError('Passwords do not match.');\r\n            return;\r\n        }\r\n        \r\n        fetch('http://127.0.0.1:8000/api/register/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ username, password }),\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (data.token) \r\n            {\r\n                localStorage.setItem('token', data.token);\r\n                window.location.href = \"/\";  // Redirect to home on success\r\n            } \r\n            else \r\n            {\r\n                setError('Failed to Register');\r\n            }\r\n        })\r\n        .catch(() => setError('Failed to Register'));\r\n    };\r\n\r\n    // form validation & improvements here\r\n\r\n    /*\r\n    Django Register Form:\r\n\r\n    class RegisterForm(UserCreationForm):\r\n    email = forms.EmailField(required=False)  \r\n\r\n    class Meta:\r\n        model = User\r\n        fields = [\"username\", \"email\", \"password1\", \"password2\"]\r\n\r\n    def clean_email(self):\r\n        email = self.cleaned_data['email'].lower()\r\n        r = User.objects.filter(email=email)\r\n        if r.exists():\r\n            raise ValidationError(\"Email already exists\")\r\n        return email\r\n\r\n    def save(self, commit=True):\r\n        user = super(RegisterForm, self).save(commit=False)\r\n        user.email = self.cleaned_data['email']\r\n        if commit: \r\n            user.save()\r\n        return user\r\n    */\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <form onSubmit={handleSubmit} className=\"register-form\">\r\n                <label>\r\n                    Username:\r\n                    <input type=\"text\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                </label>\r\n                <label>\r\n                    Password:\r\n                    <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                </label>\r\n                <button type=\"submit\">Register</button>\r\n                {error && <p>{error}</p>}\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}